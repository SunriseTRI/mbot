from aiogram import F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.dispatcher import Dispatcher

from .database import get_faq_answer, insert_faq_question, is_user_registered, insert_user
from .registration import start_registration, process_name, process_phone, RegistrationStates
from .generator import generate_response
# from .okdesk_integration import create_ticket  # –æ—Ç–∫–ª—é—á–µ–Ω–æ

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
CONTACT_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(message: Message):
    if is_user_registered(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:", reply_markup=CONTACT_KB)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def cmd_help(message: Message):
    help_text = (
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/faq - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
    )
    await message.answer(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /reg
async def cmd_reg(message: Message, state: FSMContext):
    await start_registration(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def faq_handler(message: Message, state: FSMContext):
    if not is_user_registered(message.from_user.id):
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=CONTACT_KB)

    question = message.text.strip()
    answer = get_faq_answer(question)

    if answer:
        await message.answer(f"üí° {answer}")
    else:
        insert_faq_question(question)
        await message.answer("‚ùì –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–ø–∞—Å–∏–±–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
async def contact_handler(message: Message, state: FSMContext):
    if message.contact:
        user = message.from_user
        name = message.contact.first_name or ''
        phone = message.contact.phone_number
        insert_user(user.id, user.username or '', phone, name)
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=ReplyKeyboardRemove())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
async def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_reg, Command("reg"))
    dp.message.register(contact_handler, lambda msg: msg.contact is not None)

    dp.message.register(process_name, StateFilter(RegistrationStates.waiting_for_name))
    dp.message.register(process_phone, StateFilter(RegistrationStates.waiting_for_phone))

    dp.message.register(faq_handler, F.text)
